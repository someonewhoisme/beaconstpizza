// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var NEW_ORDER;
    NEW_ORDER = {
      container: $('#ordering'),
      alert: $(".alert"),
      account: {
        container: $('#create-account'),
        form: $('#create-account-form'),
        btn: $('#create-account-btn'),
        remove: $("#remove-email"),
        input: {
          name: $("#account-name"),
          email: $("#account-email"),
          password: $("#account-password")
        },
        ajax: function(theData, that, cookie, btnValue) {
          return {
            url: '/order/new/',
            type: 'POST',
            data: theData,
            cache: false,
            beforeSend: function(xhr, settings) {
              var confirm_password, password;
              if (!that.csrfSafe(settings.type) && !that.crossDomain) {
                xhr.setRequestHeader("X-CSRFToken", cookie);
              }
              password = $("input[name='password']").val().length;
              confirm_password = $("input[name='confirm_password']").val().length;
              if (password < 4 || confirm_password < 4) {
                that.displayError("passwords needs to be at least 4 characters each.");
                that.account.btn.prop('disabled', false);
                that.account.btn.val(btnValue);
                xhr.abort();
              }

              /*
              							if password > 10 or confirm_password > 10
              								that.displayError("passwords have a 10 character max.")
              								that.account.btn.prop('disabled', false)
              								that.account.btn.val(btnValue)
              								xhr.abort()
               */
              if (password !== confirm_password) {
                that.displayError("passwords do not match");
                that.account.btn.prop('disabled', false);
                that.account.btn.val(btnValue);
                return xhr.abort();
              }

              /*
              							if not that.checkForSpace(that.account.input.name.val())
              								that.displayError("Invalid Name")
              								that.account.btn.prop('disabled', false)
              								that.account.btn.val(btnValue)
              								xhr.abort()
               */
            },
            success: function(data, textStatus, jqXHR) {
              var parsed;
              parsed = jQuery.parseJSON(data);
              if (parsed.success === true) {
                that.account.container.addClass('hidden');
                return that.shipping.container.removeClass('hidden');
              } else if (parsed.data === 'email-exists') {
                return window.location = '/signin/';
              } else {
                that.account.btn.prop('disabled', false);
                that.account.btn.val(btnValue);
                return that.displayError(parsed.message);
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              console.log(errorThrown);
              that.account.btn.prop('disabled', false);
              return that.account.btn.val(btnValue);
            }
          };
        }
      },
      shipping: {
        container: $('#shipping'),
        form: $('#shipping-information-form'),
        btn: $('#shipping-information-btn'),
        ajax: function(theData, that, cookie, btnValue) {
          return {
            url: '/order/new/shipping-information/',
            type: 'POST',
            data: theData,
            cache: false,
            beforeSend: function(xhr, settings) {
              if (!that.csrfSafe(settings.type) && !that.crossDomain) {
                return xhr.setRequestHeader("X-CSRFToken", that.getCookie('csrftoken'));
              }
            },
            success: function(data, textStatus, jqXHR) {
              var parsed;
              parsed = jQuery.parseJSON(data);
              if (parsed.success === true) {
                that.shipping.container.addClass('hidden');
                return that.checkout.container.removeClass('hidden');
              } else {
                that.shipping.btn.prop('disabled', false);
                return that.shipping.btn.val(btnValue);
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              console.log(errorThrown);
              that.shipping.btn.prop('disabled', false);
              return that.shipping.btn.val(btnValue);
            }
          };
        }
      },
      confirm: {
        container: $("#confirmation"),
        btn: $("#confirmation-btn"),
        ajax: function(theData, that, cookie, btnValue) {
          return {};
        }
      },
      checkout: {
        container: $('#checkout'),
        form: $('#checkout-form'),
        btn: $('#checkout-btn'),
        keys: {
          test: "pk_test_EnkB8EQ6vRawTKuKVQc86o8t",
          live: "pk_live_zmsGtqWaasg8d7IE581qWhkn"
        },
        last_4_digits: $("#last_4_digits"),
        stripe_token: $("#stripe_token"),
        ajax: function(that, cookie, btnValue) {
          return {
            url: '/order/new/checkout/',
            type: 'POST',
            cache: false,
            data: {
              last_4_digits: $("input[name='last_4_digits']").val(),
              stripe_token: $("input[name='stripe_token']").val()
            },
            beforeSend: function(xhr, settings) {
              if (!that.csrfSafe(settings.type) && !that.crossDomain) {
                return xhr.setRequestHeader("X-CSRFToken", cookie);
              }
            },
            success: function(data, textStatus, jqXHR) {
              var parsed;
              parsed = jQuery.parseJSON(data);
              if (parsed.success === true) {
                that.checkout.container.addClass('hidden');
                return that.confirmation.container.removeClass('hidden');
              } else {
                that.checkout.btn.prop('disabled', false);
                return that.checkout.btn.val(btnValue);
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              console.log(errorThrown);
              that.checkout.btn.prop('disabled', false);
              return that.checkout.btn.val(btnValue);
            }
          };
        }
      },
      confirmation: {
        container: $("#thank-you")
      },

      /*
      			used to retrieve cookie
       */
      getCookie: function(name) {
        var cookie, cookieValue, cookies, i, _i, _ref;
        cookieValue = null;
        if (document.cookie && document.cookie !== '') {
          cookies = document.cookie.split(';');
          for (i = _i = 0, _ref = cookies.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            cookie = jQuery.trim(cookies[i]);
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
              break;
            }
          }
        }
        return cookieValue;
      },

      /*
      			checks validity of CSRF token
       */
      csrfSafe: function(method) {
        return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
      },
      displayError: function(msg) {
        var that;
        if (this.alert.is(':visible')) {
          this.alert.fadeOut();
        }
        this.alert.html(msg);
        window.scrollTo(0, 0);
        this.alert.fadeIn();
        that = this;
        setTimeout(function() {
          return that.alert.fadeOut();
        }, 2000);
      },
      validateEmail: function() {
        var email;
        email = $('input[name="email"]');
        if (email.val().length === 0 || !/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(email.val())) {
          this.displayError('please enter a valid email address.');
          return false;
        } else {
          return true;
        }
      },
      preventChromeAutoFill: function() {
        var i, inputElements, _i, _ref, _results;
        this.account.input.name.focus();
        if (document.getElementsByTagName) {
          inputElements = document.getElementsByTagName('input');
          _results = [];
          for (i = _i = 0, _ref = inputElements[i]; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (inputElements[i].className && (inputElements[i].className.indexOf('disableAutoComplete') !== -1)) {
              _results.push(inputElements[i].setAttribute('autocomplete', 'off'));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      },
      checkForSpace: function(input) {
        var char, _i, _len;
        for (_i = 0, _len = input.length; _i < _len; _i++) {
          char = input[_i];
          if (char === " ") {
            return true;
          }
        }
        return false;
      },
      init: function() {
        var cookie, that;
        that = this;
        Stripe.setPublishableKey(this.checkout.keys.live);
        this.preventChromeAutoFill();
        cookie = this.getCookie('csrftoken');
        this.account.form.submit(function(event) {
          var btnValue, self, theData;
          event.preventDefault();
          self = $(this);
          theData = self.serializeArray();
          btnValue = that.account.btn.val();
          that.account.btn.prop('disabled', true);
          that.account.btn.val('working...');
          return $.ajax(that.account.ajax(theData, that, cookie, btnValue));
        });
        this.shipping.form.submit(function(event) {
          var btnValue, self, theData;
          event.preventDefault();
          console.log("test");
          self = $(this);
          theData = self.serializeArray();
          btnValue = that.shipping.btn.val();
          that.shipping.btn.prop('disabled', true);
          that.shipping.btn.val('working...');
          return $.ajax(that.shipping.ajax(theData, that, that.getCookie('csrftoken'), btnValue));
        });
        return this.checkout.form.submit(function(event) {
          var btnValue, self;
          event.preventDefault();
          self = $(this);
          btnValue = that.checkout.btn.val();
          that.checkout.btn.prop('disabled', true);
          that.checkout.btn.val('working...');
          return Stripe.createToken({
            number: $("#credit_card_number").val(),
            expMonth: $("#expiry_month").val(),
            expYear: $("#expiry_year").val(),
            cvc: $("#cvv").val()
          }, function(status, response) {
            if (status === 200) {
              console.log(status, response);
              that.checkout.last_4_digits.val(response.card.last4);
              that.checkout.stripe_token.val(response.id);
              return $.ajax(that.checkout.ajax(that, cookie, btnValue));
            } else {
              that.displayError(response.error.message);
              that.checkout.btn.prop("disabled", false);
              return that.checkout.btn.val("try again");
            }
          });
        });
      }
    };
    return NEW_ORDER.init();
  });

}).call(this);
